Entity Framework Core

Para criar o container do banco de dados basta executar o comando
docker compose up

Para criar a migration com a tabelas (será criada a pasta Migrations com o arquivo da Migration Up e Down e com o Snapshot) (Criar no Projeto Infra)
Add-Migration NomeMigration

Para executar as migrations criadas
update-database

Deletar/Rollback
Para parar todos os containers, todas as networks, todos os volumes, todas as imagens e tudo o que está no cache
docker system prune -a --volumes


Para remover a Migration
Remove-Migration

Rollback All Migrations
Update-Database -Migration 0


CAIO  

1. o core é aonde fica localizado a parte central e mais interna do código, por ex lá tem os use cases, entities, regras de negocio e a lógica por trás do código em si

2. já a outra camada (infra ou adaptadores) seria a parte da onde fica as controllers que parte de alguns detalhes técnicos de processamento, chamadas de api e conexão com banco de dados 

3. a ultima camada seria a interface com o usuário, aonde através do comando do cliente é feito as requisições de acordo com ele

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Status Code 400 (Bad Request)
//Os parâmetros de consulta são utilizados com o objetivo de enviar informações extras numa solicitação HTTP.
//Se estes parâmetros forem inseridos incorretamente ou se houver falhas na sua estrutura, o servidor pode retornar com o erro 400.
//Outro fator importante é ressaltar que o HTTP error 400 não indica problema com o servidor em si, mas sim a solicitação enviado pelo usuário.
//O erro acontece porque algo não está de acordo com o protocolo HTTP.
//Exemplo: foi enviado algum parametro incorreto, como por exemplo id zero ou uma letra invés de numero (fazer teste pelo postman)

//StatusCode 500 (Internal Server Error)
//O erro 500 significa que há um problema com alguma das bases que faz um site rodar.
//Esse erro pode ser, basicamente, no servidor que mantém as páginas no ar ou na comunicação com o sistema de arquivos, que fornece a infraestrutura para o site.
//Quando há alguns desses problemas, automaticamente todas as páginas do site ficarão indisponíveis.
//É por isso que há uma completa inatividade, com a indisponibilidade podendo ser verificada de forma ampla, mesmo que o usuário tente acessar diferentes links do site.
//Exemplo: A conexão com o banco de dados está fora, a aplicação está com algum problema ou houve qualquer exception no codigo é retornado 500

//Status Code 200 (OK)
//A solicitação foi bem-sucedida.O significado do resultado de "sucesso" depende do método HTTP:
//GET: O recurso foi obtido e transmitido no corpo da mensagem.
//PUT ou POST: O recurso que descreve o resultado da ação é transmitido no corpo da mensagem.
//Exemplo: Quando é encontrado algum cliente é retornado 200 com o cliente no conteudo da mensagem

//Status Code 204 (No Content)
//Não há conteúdo para enviar para esta solicitação, mas os cabeçalhos podem ser úteis.
//O agente do usuário pode atualizar seus cabeçalhos em cache para este recurso com os novos.
//Exemplo: Foi solicitado um id de cliente que não existe, assim o response vem nulo